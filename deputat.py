import datetime
import random
import res
from telebot import types


class Deputat(object):
    def __init__(self, db_object, db_connection, bot):
        self.db_object = db_object
        self.db_connection = db_connection
        self.bot = bot

    # starts elections (–∞ —à–æ)
    def _start_elections_(self, call):
        # first, check if user is admin, because start the elections can ONLY an admin
        bot = self.bot
        db_object = self.db_object
        user_id = call.from_user.id
        chat_id = str(call.message.chat.id)
        is_admin = False
        admins_t = bot.get_chat_administrators(call.message.chat.id)  # get admins list
        for admin in admins_t:
            if user_id == admin.user.id:
                is_admin = True
                break

        if not is_admin:    # user is not admin
            bot.answer_callback_query(call.id, "–¢–∏ —Ö—Ç–æ —Ç–∞–∫–∏–π —à–æ–± —Å—é–¥–∞ —Ç–∏–∫–∞—Ç—å? –ê–¥–º—ñ–Ω–∞ –∑–æ–≤–∏!!!", show_alert=True)
        else:               # user is admin
            sql_get_candidates_count = f"SELECT COUNT(*) FROM elections WHERE chatid = CAST({chat_id} AS varchar)"
            db_object.execute(sql_get_candidates_count)
            count = db_object.fetchone()

            if count is None or count[0] < 3:
                bot.answer_callback_query(call.id, "–ó–∞–º–∞–ª–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤! –¢—Ä–µ–±–∞ —Ö–æ—Ç—å 3", show_alert=True)
            else:           # start elections
                bot.send_message(chat_id, "–í–∏–±–æ—Ä–∏ –ø–æ—á–∞–ª–∏—Å—å!")
                self.show_candidates(call.message)
                bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    # deletes candidate from elections in DB
    def _delete_candidate_(self, call):
        db_object = self.db_object
        db_connection = self.db_connection
        bot = self.bot
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        db_object.execute(f"SELECT userid FROM elections WHERE userid = {user_id}")
        on_elections = db_object.fetchone()
        if on_elections is None or on_elections[0] is None:
            bot.answer_callback_query(call.id, "—ñ —à–æ —è —Å—É–∫–∞ –º–∞—é –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ —Ç–≤–æ—î–º—É", show_alert=True)
        else:
            db_object.execute(f"DELETE FROM elections WHERE userid = {user_id}")
            db_connection.commit()
            self._edit_candidates_(call)
            bot.answer_callback_query(call.id, "–≤—Å—å–æ, –Ω–µ–º–∞ —Ç–µ–±–µ –Ω–∞ –≤–∏–±–æ—Ä–∞—Ö", show_alert=True)

    # adds candidate to elections in DB
    def _add_candidate_(self, call):
        db_object = self.db_object
        db_connection = self.db_connection
        bot = self.bot
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        sql_get_user_info = f"SELECT level, name, username, money, rating FROM deputats WHERE userid = {user_id}"
        db_object.execute(sql_get_user_info)
        result = db_object.fetchone()
        sql_get_level = f"SELECT level FROM deputats JOIN elections e on deputats.userid = e.userid"
        db_object.execute(sql_get_level)
        level = db_object.fetchone()
        db_object.execute(f"SELECT userid FROM elections WHERE userid = {user_id}")
        on_elections = db_object.fetchone()
        if on_elections is not None:
            bot.answer_callback_query(call.id, "—Ç–∞–∫ —Ç–∏ –≤–∂–µ –Ω–∞ –≤–∏–±–æ—Ä–∞—Ö", show_alert=True)
        elif result is None or result[0] is None:
            bot.answer_callback_query(call.id, "–∫–æ–≥–æ —Ç–∏ –±–ª—è—Ç—å –Ω–∞ –≤–∏–±–æ—Ä–∏ –ø–æ—Å–∏–ª–∞—î—à", show_alert=True)
        elif result[0] < 4:
            bot.answer_callback_query(call.id, "–ø—ñ–¥—Ä–æ—Å—Ç–∏", show_alert=True)
        elif result[0] == res.MAX_LEVEL:
            bot.answer_callback_query(call.id, "–∫—É–¥–∞ –¥–∞–ª—å—à–µ, –≤ —Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å", show_alert=True)
        elif result[3] < res.lvlup_requirements[result[0] - 1]:
            bot.answer_callback_query(call.id, f"–¢–≤—ñ–π –¥–µ–ø—É—Ç–∞—Ç –Ω–∞–¥—Ç–æ –±—ñ–¥–Ω–∏–π, –¥–ª—è –ø–æ–¥–∞–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∏ –Ω–∞ –≤–∏–±–æ—Ä–∏!"
                                               f"\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –±–∞–±–ª–∞:üí∞{res.lvlup_requirements[result[0] - 1]}$"
                                      , show_alert=True)
        elif result[4] < res.lvlup_rating[result[0] - 1]:
            bot.answer_callback_query(call.id, f"–£ —Ç–≤–æ–≥–æ –¥–µ–ø—É—Ç–∞—Ç–∞ –Ω–∞–¥—Ç–æ –º–∞–ª–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–µ—Ä–µ–¥ –≥—Ä–æ–º–∞–¥–∏!"
                                               f"\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥—É:‚≠ê{res.lvlup_rating[result[0] - 1]}"
                                      , show_alert=True)
        elif level is not None and result[0] != level[0]:
            bot.answer_callback_query(call.id, "–≤ —Ç–µ–±–µ –æ–ø—à–µ –Ω–µ —Ç–æ–π –∂–µ —Ä—ñ–≤–µ–Ω—å, —à–æ —É –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤", show_alert=True)
        else:   # add candidate
            db_object.execute(f"INSERT INTO elections(userid, chatid, votes) VALUES({user_id}, {chat_id}, 0)")
            db_connection.commit()
            self._edit_candidates_(call)
            bot.answer_callback_query(call.id, "—î—Å—Ç—å –∫–∞–Ω—Ç–∞–∫—Ç", show_alert=True)

    # edits election-message, adds or removes candidates from it
    def _edit_candidates_(self, call):
        db_object = self.db_object
        bot = self.bot
        chat_id = call.message.chat.id
        buttons = types.InlineKeyboardMarkup()
        buttons.add(types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É", callback_data='ela'))
        buttons.add(types.InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É", callback_data='eld'))
        buttons.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–±—ñ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤", callback_data='els'))
        sql_get_candidates = f"SELECT username, name FROM deputats JOIN elections e on deputats.userid = e.userid " \
                             f"WHERE chatid = CAST({chat_id} AS varchar)"
        db_object.execute(sql_get_candidates)
        result = db_object.fetchall()
        names = "–Ü–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∏–±–æ—Ä—ñ–≤! –ö–∞–Ω–¥–∏–¥–∞—Ç–∏:"
        for resul in result:
            names += f"\n{resul[1]} ({resul[0]})"
        bot.edit_message_text(names, chat_id, call.message.message_id, reply_markup=buttons)

    def me(self, message):
        bot = self.bot
        buttons = types.InlineKeyboardMarkup()
        killed = types.InlineKeyboardButton(text='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–±–∏—Ç–∏—Ö –¥–µ–ø—É—Ç–∞—Ç—ñ–≤', callback_data="killed_me")
        top = types.InlineKeyboardButton(text='–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data="top_me")
        buttons.add(killed, top)
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",reply_markup=buttons)

    def deputat(self, message):
        bot = self.bot
        buttons = types.InlineKeyboardMarkup()
        get = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç–∏ –¥—î–ø—É—Ç–∞—Ç–∞', callback_data="get_deputat")
        show = types.InlineKeyboardButton(text='–ü–æ–∑–∏—Ä–∏—Ç–∏ –Ω–∞ –¥–µ–ø—É—Ç–∞—Ç–∞', callback_data="show_deputat")
        work = types.InlineKeyboardButton(text='–ü—Ä–∞—Ü—é–≤–∞—Ç–∏', callback_data="work_deputat")
        rating = types.InlineKeyboardButton(text='–ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥', callback_data="rating_deputat")
        lvlup = types.InlineKeyboardButton(text='–ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å', callback_data="lvlup_deputat")
        buttons.add(get, show, work, rating, lvlup)
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –¥—î–ø—É—Ç–∞—Ç–∞", reply_markup=buttons)

    def business(self, message):
        bot = self.bot
        buttons = types.InlineKeyboardMarkup()
        visit = types.InlineKeyboardButton(text='–ó—ñ–±—Ä–∞—Ç–∏ –±–∞–±–ª–æ', callback_data=f"collect_business {message.from_user.id}")
        provide = types.InlineKeyboardButton(text='–ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏', callback_data=f"provide_business {message.from_user.id}")
        buy = types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç–∏ –±—ñ–∑–Ω—î—Å', callback_data=f"buy_business")
        show = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∂–∏', callback_data=f"show_business")
        buttons.add(visit, provide, buy, show)
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –±—ñ–∑–Ω–µ—Å—è–∫", reply_markup=buttons)

    # buy user a new business
    def buy_business_deputat(self, message):
        bot = self.bot
        if message.chat.type != "private":
            bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—É —Å–ª—ñ–¥ –ø–∏—Å–∞—Ç–∏ –≤ –ü–ü –±–æ—Ç—É!")
        else:
            buttons = types.InlineKeyboardMarkup()
            for i in range(len(res.biz_prices)):
                buttons.add(
                    types.InlineKeyboardButton(text=res.biz_name[i] + f"üí∞{res.biz_prices[i]}", callback_data=f'bb{i}'))
            buttons.add(types.InlineKeyboardButton(text="–Ü —à–æ –º–µ–Ω—ñ –≤–∏–±–∏—Ä–∞—Ç–∏?", callback_data="help"))
            bot.reply_to(message, res.biz_text, reply_markup=buttons)

    # handle purchase call
    def handle_biz_purchase_deputat(self, call):
        db_object = self.db_object
        db_connection = self.db_connection
        bot = self.bot
        user_id = call.from_user.id
        sql_get_money = f"SELECT deputatid, money FROM deputats WHERE userid = {user_id}"
        db_object.execute(sql_get_money)
        result = db_object.fetchone()
        biz_id = int(call.data[2:3])
        biz_name = res.biz_db_name[biz_id]

        if not result or result[0] is None:     # if user doesn't have a deputat
            bot.send_message(call.message.chat.id, "–Ü –∫–æ–º—É —Ç–∏ –∑—ñ–±—Ä–∞–≤—Å—è –∫—É–ø–ª—è—Ç–∏? –°–æ–±—ñ —á–∏ —à–æ?")
        elif result[1] < res.biz_prices[biz_id]:
            bot.send_message(call.message.chat.id, "–¢–≤—ñ–π –¥–µ–ø—É—Ç–∞—Ç –Ω–∞–¥—Ç–æ –±—ñ–¥–Ω–∏–π, —à–æ–± –∫—É–ø–∏—Ç–∏ –æ —Ü–µ –≤–æ—Ç")
            bot.send_sticker(call.message.chat.id, res.money_valakas_sticker)
        else:
            sql_get_businesses = f"SELECT kid, negr, kiosk, deputatid FROM business WHERE userid = {user_id}"
            db_object.execute(sql_get_businesses)
            deputat_id = db_object.fetchone()
            if deputat_id is None:  # if user had no biz of this type, use INSERT
                sql_new_biz = f"INSERT INTO business(userid, deputatid, {biz_name}) VALUES({user_id}, {result[0]}, 1)"
                db_object.execute(sql_new_biz)
                db_connection.commit()
                self._purchase_update_(call, result, biz_id)
            else:                   # use UPDATE
                if deputat_id[biz_id] is None:
                    biz_count = 1
                else:
                    biz_count = deputat_id[biz_id] + 1
                sql_update_biz = f"UPDATE business SET {biz_name} = {biz_count}, {biz_name + 'visit'} = NULL, " \
                                 f"{biz_name + 'work'} = NULL WHERE userid = {user_id}"
                db_object.execute(sql_update_biz)
                db_connection.commit()
                self._purchase_update_(call, result, biz_id)

    # show user's businesses
    def show_business_deputat(self, message):
        db_object = self.db_object
        bot = self.bot
        user_id = message.from_user.id
        sql_get_bizs = f"SELECT kid, negr, kiosk FROM business WHERE userid = {user_id}"
        db_object.execute(sql_get_bizs)
        result = db_object.fetchone()
        if not result:
            bot.reply_to(message, "–£ —Ç–µ–±–µ –Ω–µ–º–∞ –¥–µ–ø—É—Ç–∞—Ç–∞, –∞–±–æ –±—ñ–∑–Ω–µ—Å—ñ–≤!")
        else:
            reply_text = "–ë—ñ–∑–Ω–µ—Å–∏ —Ç–≤–æ–≥–æ –¥–µ–ø—É—Ç–∞—Ç–∞:"
            for i in range(len(result)):
                if result[i] is not None:
                    reply_text += f"\n{res.biz_name[i]} - {result[i]}"
            bot.reply_to(message, reply_text)
            bot.send_sticker(message.chat.id, res.money_pagulich_sticker)

    # starts election's recruitment
    def elections_deputat(self, message):
        bot = self.bot
        db_object = self.db_object
        if message.chat.type == "private":
            bot.reply_to(message, "–Ü —à–æ –±–ª—è—Ç—å? –¢–∏ —Ç—É—Ç –æ–¥–∏–Ω, —Ç–æ–º—É —Å—é –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ –¥–∞")
        else:
            buttons = types.InlineKeyboardMarkup()
            buttons.add(types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É", callback_data='ela'))
            buttons.add(types.InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É", callback_data='eld'))
            buttons.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–±—ñ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤", callback_data='els'))
            chat_id = message.chat.id
            sql_get_candidates = f"SELECT username, name FROM deputats JOIN elections e on deputats.userid = e.userid " \
                  f"WHERE chatid = CAST({chat_id} AS varchar)"
            db_object.execute(sql_get_candidates)
            result = db_object.fetchall()
            names = ""
            for resul in result:
                names += f"\n{resul[1]} ({resul[0]})"
            bot.reply_to(message, f"–Ü–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∏–±–æ—Ä—ñ–≤! –ö–∞–Ω–¥–∏–¥–∞—Ç–∏:{names}", reply_markup=buttons)

    # handles elections (call-buttons)
    def handle_elect_deputat(self, call):  # this method handles buttons from elections_deputat method
        call_type = call.data[2:3]

        if call_type == 's':
            self._start_elections_(call)
        elif call_type == 'd':
            self._delete_candidate_(call)
        elif call_type == 'a':
            self._add_candidate_(call)

    # shows candidates in current elections
    def show_candidates(self, message):
        db_object = self.db_object
        bot = self.bot
        chat_id = message.chat.id
        sql_get_candidates = f"SELECT username, name, photo, level, money, rating, e.votes FROM deputats " \
                             f"JOIN elections e on deputats.userid = e.userid " \
                             f"WHERE chatid = CAST({chat_id} AS varchar) order by e.userid"
        db_object.execute(sql_get_candidates)
        result = db_object.fetchall()

        if result is None:  # no candidates
            bot.send_message(message.chat.id, "–ö–∞–≤–æ, –∫—É–¥–∞ —ñ —à–æ...")
        else:
            i = 1
            bot.send_message(message.chat.id, "–í–û –¢–û–í–û –í–ê–®–Ü –ö–ê–ù–î–ò–î–ê–¢–ò –Ñ")
            for ress in result:
                text = str(i) + ' ' + ress[1] + ' (' + ress[0] + ') üí∞' + str(ress[4]) + '$ ‚≠ê' + str(ress[5]) + ' üìä'\
                       + str(ress[6])
                bot.send_photo(message.chat.id, res.level_photos[ress[3] - 1][ress[2]], caption=text)
                i += 1
            text = "–î–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /vote —Ç–∞ –Ω–æ–º–µ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏—â–µ –Ω–∞–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É" \
                   "\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /vote 3 - –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ 3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
            bot.send_message(message.chat.id, text)

    # vote for some candidate
    def election_vote(self, message):
        db_object = self.db_object
        db_connection = self.db_connection
        bot = self.bot
        user_id = message.from_user.id
        chat_id = message.chat.id

        sql_get_candidates_count = f"SELECT COUNT(*) FROM elections WHERE chatid = CAST({chat_id} AS varchar)"
        db_object.execute(sql_get_candidates_count)
        count = db_object.fetchone()
        sql_get_voted = f"SELECT userid FROM voted WHERE chatid = CAST({chat_id} AS varchar) and userid = {user_id}"
        db_object.execute(sql_get_voted)
        result = db_object.fetchone()
        vote_for = int(message.text[6:])    # get number of candidate
        if count is None or vote_for <= 0 or vote_for > count[0] or result is not None:     # wrong input
            bot.send_message(message.chat.id, "–£—ó–±–∞—Ç–∏ —á–∏ –≤'—î–±–∞—Ç–∏?")
        else:
            vote_for -= 1
            sql_get_votes = f"SELECT votes FROM elections WHERE chatid = CAST({chat_id} AS varchar) order by userid " \
                            f"OFFSET {vote_for} LIMIT 1"
            db_object.execute(sql_get_votes)
            result = db_object.fetchone()
            votes = int(result[0]) + 1
            sql_vote = f"UPDATE elections SET votes = {votes} WHERE chatid = CAST({chat_id} AS varchar) and " \
                       f"userid = (select userid from elections order by userid offset {vote_for} limit 1)"
            db_object.execute(sql_vote)
            db_connection.commit()
            sql_update_voted = f"INSERT INTO voted(userid, chatid) VALUES {user_id, chat_id}"
            db_object.execute(sql_update_voted)
            db_connection.commit()
            bot.send_message(message.chat.id, "–ì–æ–ª–æ—Å –ø—Ä–∏–π–Ω—è—Ç–æ!")

    # choose winner, lvlup
    def finish_election(self, message):
        bot = self.bot
        db_object = self.db_object
        db_connection = self.db_connection
        user_id = message.from_user.id
        chat_id = message.chat.id
        isadmin = False
        admins_t = bot.get_chat_administrators(message.chat.id)
        for admin in admins_t:
            if user_id == admin.user.id:
                isadmin = True
                break
        if not isadmin:
            bot.send_message(message.chat.id, "–¢–∏ —Ö—Ç–æ —Ç–∞–∫–∏–π —à–æ–± —Å—é–¥–∞ —Ç–∏–∫–∞—Ç—å, —Å—É–∫–∞? –ê–î–ú–Ü–ù–ê –ó–û–í–ò!!!")
        else:
            sql_get_winner = f"SELECT elections.userid, d.level, d.username FROM elections " \
                             f"JOIN deputats d on elections.userid = d.userid " \
                             f"WHERE chatid = CAST({chat_id} AS varchar) ORDER BY votes DESC LIMIT 1"
            db_object.execute(sql_get_winner)
            result = db_object.fetchone()
            if result is None:  # if no elections are held in chat
                bot.send_message(message.chat.id, "–ù—É —Ç–∏ –∑–æ–≤—Å—ñ–º –¥–µ–±—ñ–ª, —á–∏ —Ö—ñ–±–∞ —Ç—Ä–æ—à–∫–∞?")
            else:               # lvlup winner, finish-up
                photo = random.randint(0, len(res.level_photos[result[1]]) - 1)
                sql_lvlup = f"UPDATE deputats SET level = {result[1] + 1}, photo = {photo} WHERE userid = {result[0]}"
                db_object.execute(sql_lvlup)
                db_connection.commit()
                bot.send_message(message.chat.id, f"–£–†–ê –£–†–ê –£–†–ê\n–í–æ—Ç –Ω–∞—à –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ç—É–≤–æ —î –¥–∞ - {result[2]}")
                bot.send_sticker(message.chat.id, res.happy_sticker)
                sql_clear_elections = f"DELETE FROM elections WHERE chatid = CAST({chat_id} AS varchar)"
                db_object.execute(sql_clear_elections)
                db_connection.commit()
                sql_clear_voted = f"DELETE FROM voted WHERE chatid = CAST({chat_id} AS varchar)"
                db_object.execute(sql_clear_voted)
                db_connection.commit()

    # kills user's deputat
    def kill_deputat(self, message):
        db_object = self.db_object
        db_connection = self.db_connection
        bot = self.bot
        user_id = message.from_user.id
        sql_get_killed = f"SELECT deputatid, killed FROM deputats WHERE userid = {user_id}"
        db_object.execute(sql_get_killed)
        result = db_object.fetchone()
        if not result:
            bot.reply_to(message, "–ê —à–æ –≤–±–∏–≤–∞—Ç–∏ —Ç–æ?")
        elif result[0] is None:
            bot.reply_to(message, "–°–µ–±–µ –≥—Ä–æ—Ö–Ω—É—Ç–∏ —Ö–æ—á–µ—à, —á–∏ —à–æ?")
        else:
            if result[1] is None:
                killed = 0
            else:
                killed = result[1]
            sql_update_killed = f"UPDATE deputats SET deputatid = NULL, lastworked = NULL, killed = {killed + 1}" \
                                f" WHERE userid = {user_id}"
            db_object.execute(sql_update_killed)
            db_connection.commit()
            sql_delete_business = f"DELETE FROM business WHERE userid = {user_id}"
            db_object.execute(sql_delete_business)
            db_connection.commit()
            bot.reply_to(message, "–î–µ–ø—É—Ç–∞—Ç—É —Ä–æ–∑—ñ—Ä–≤–∞–ª–æ —Å—Ä–∞–∫—É...\n–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ - /get")
